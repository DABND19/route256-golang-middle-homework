package domain

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.ProductServiceClient -o ./zzz_product_service_client.go -n ProductServiceClientMock

import (
	"context"
	"route256/checkout/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductServiceClientMock implements ProductServiceClient
type ProductServiceClientMock struct {
	t minimock.Tester

	funcGetProducts          func(ctx context.Context, skus []models.SKU) (m1 map[models.SKU]*models.Product, err error)
	inspectFuncGetProducts   func(ctx context.Context, skus []models.SKU)
	afterGetProductsCounter  uint64
	beforeGetProductsCounter uint64
	GetProductsMock          mProductServiceClientMockGetProducts
}

// NewProductServiceClientMock returns a mock for ProductServiceClient
func NewProductServiceClientMock(t minimock.Tester) *ProductServiceClientMock {
	m := &ProductServiceClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductsMock = mProductServiceClientMockGetProducts{mock: m}
	m.GetProductsMock.callArgs = []*ProductServiceClientMockGetProductsParams{}

	return m
}

type mProductServiceClientMockGetProducts struct {
	mock               *ProductServiceClientMock
	defaultExpectation *ProductServiceClientMockGetProductsExpectation
	expectations       []*ProductServiceClientMockGetProductsExpectation

	callArgs []*ProductServiceClientMockGetProductsParams
	mutex    sync.RWMutex
}

// ProductServiceClientMockGetProductsExpectation specifies expectation struct of the ProductServiceClient.GetProducts
type ProductServiceClientMockGetProductsExpectation struct {
	mock    *ProductServiceClientMock
	params  *ProductServiceClientMockGetProductsParams
	results *ProductServiceClientMockGetProductsResults
	Counter uint64
}

// ProductServiceClientMockGetProductsParams contains parameters of the ProductServiceClient.GetProducts
type ProductServiceClientMockGetProductsParams struct {
	ctx  context.Context
	skus []models.SKU
}

// ProductServiceClientMockGetProductsResults contains results of the ProductServiceClient.GetProducts
type ProductServiceClientMockGetProductsResults struct {
	m1  map[models.SKU]*models.Product
	err error
}

// Expect sets up expected params for ProductServiceClient.GetProducts
func (mmGetProducts *mProductServiceClientMockGetProducts) Expect(ctx context.Context, skus []models.SKU) *mProductServiceClientMockGetProducts {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceClientMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceClientMockGetProductsExpectation{}
	}

	mmGetProducts.defaultExpectation.params = &ProductServiceClientMockGetProductsParams{ctx, skus}
	for _, e := range mmGetProducts.expectations {
		if minimock.Equal(e.params, mmGetProducts.defaultExpectation.params) {
			mmGetProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProducts.defaultExpectation.params)
		}
	}

	return mmGetProducts
}

// Inspect accepts an inspector function that has same arguments as the ProductServiceClient.GetProducts
func (mmGetProducts *mProductServiceClientMockGetProducts) Inspect(f func(ctx context.Context, skus []models.SKU)) *mProductServiceClientMockGetProducts {
	if mmGetProducts.mock.inspectFuncGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("Inspect function is already set for ProductServiceClientMock.GetProducts")
	}

	mmGetProducts.mock.inspectFuncGetProducts = f

	return mmGetProducts
}

// Return sets up results that will be returned by ProductServiceClient.GetProducts
func (mmGetProducts *mProductServiceClientMockGetProducts) Return(m1 map[models.SKU]*models.Product, err error) *ProductServiceClientMock {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceClientMock.GetProducts mock is already set by Set")
	}

	if mmGetProducts.defaultExpectation == nil {
		mmGetProducts.defaultExpectation = &ProductServiceClientMockGetProductsExpectation{mock: mmGetProducts.mock}
	}
	mmGetProducts.defaultExpectation.results = &ProductServiceClientMockGetProductsResults{m1, err}
	return mmGetProducts.mock
}

// Set uses given function f to mock the ProductServiceClient.GetProducts method
func (mmGetProducts *mProductServiceClientMockGetProducts) Set(f func(ctx context.Context, skus []models.SKU) (m1 map[models.SKU]*models.Product, err error)) *ProductServiceClientMock {
	if mmGetProducts.defaultExpectation != nil {
		mmGetProducts.mock.t.Fatalf("Default expectation is already set for the ProductServiceClient.GetProducts method")
	}

	if len(mmGetProducts.expectations) > 0 {
		mmGetProducts.mock.t.Fatalf("Some expectations are already set for the ProductServiceClient.GetProducts method")
	}

	mmGetProducts.mock.funcGetProducts = f
	return mmGetProducts.mock
}

// When sets expectation for the ProductServiceClient.GetProducts which will trigger the result defined by the following
// Then helper
func (mmGetProducts *mProductServiceClientMockGetProducts) When(ctx context.Context, skus []models.SKU) *ProductServiceClientMockGetProductsExpectation {
	if mmGetProducts.mock.funcGetProducts != nil {
		mmGetProducts.mock.t.Fatalf("ProductServiceClientMock.GetProducts mock is already set by Set")
	}

	expectation := &ProductServiceClientMockGetProductsExpectation{
		mock:   mmGetProducts.mock,
		params: &ProductServiceClientMockGetProductsParams{ctx, skus},
	}
	mmGetProducts.expectations = append(mmGetProducts.expectations, expectation)
	return expectation
}

// Then sets up ProductServiceClient.GetProducts return parameters for the expectation previously defined by the When method
func (e *ProductServiceClientMockGetProductsExpectation) Then(m1 map[models.SKU]*models.Product, err error) *ProductServiceClientMock {
	e.results = &ProductServiceClientMockGetProductsResults{m1, err}
	return e.mock
}

// GetProducts implements ProductServiceClient
func (mmGetProducts *ProductServiceClientMock) GetProducts(ctx context.Context, skus []models.SKU) (m1 map[models.SKU]*models.Product, err error) {
	mm_atomic.AddUint64(&mmGetProducts.beforeGetProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProducts.afterGetProductsCounter, 1)

	if mmGetProducts.inspectFuncGetProducts != nil {
		mmGetProducts.inspectFuncGetProducts(ctx, skus)
	}

	mm_params := &ProductServiceClientMockGetProductsParams{ctx, skus}

	// Record call args
	mmGetProducts.GetProductsMock.mutex.Lock()
	mmGetProducts.GetProductsMock.callArgs = append(mmGetProducts.GetProductsMock.callArgs, mm_params)
	mmGetProducts.GetProductsMock.mutex.Unlock()

	for _, e := range mmGetProducts.GetProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.err
		}
	}

	if mmGetProducts.GetProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProducts.GetProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProducts.GetProductsMock.defaultExpectation.params
		mm_got := ProductServiceClientMockGetProductsParams{ctx, skus}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProducts.t.Errorf("ProductServiceClientMock.GetProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProducts.GetProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProducts.t.Fatal("No results are set for the ProductServiceClientMock.GetProducts")
		}
		return (*mm_results).m1, (*mm_results).err
	}
	if mmGetProducts.funcGetProducts != nil {
		return mmGetProducts.funcGetProducts(ctx, skus)
	}
	mmGetProducts.t.Fatalf("Unexpected call to ProductServiceClientMock.GetProducts. %v %v", ctx, skus)
	return
}

// GetProductsAfterCounter returns a count of finished ProductServiceClientMock.GetProducts invocations
func (mmGetProducts *ProductServiceClientMock) GetProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.afterGetProductsCounter)
}

// GetProductsBeforeCounter returns a count of ProductServiceClientMock.GetProducts invocations
func (mmGetProducts *ProductServiceClientMock) GetProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProducts.beforeGetProductsCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceClientMock.GetProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProducts *mProductServiceClientMockGetProducts) Calls() []*ProductServiceClientMockGetProductsParams {
	mmGetProducts.mutex.RLock()

	argCopy := make([]*ProductServiceClientMockGetProductsParams, len(mmGetProducts.callArgs))
	copy(argCopy, mmGetProducts.callArgs)

	mmGetProducts.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductsDone returns true if the count of the GetProducts invocations corresponds
// the number of defined expectations
func (m *ProductServiceClientMock) MinimockGetProductsDone() bool {
	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProducts != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetProductsInspect logs each unmet expectation
func (m *ProductServiceClientMock) MinimockGetProductsInspect() {
	for _, e := range m.GetProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceClientMock.GetProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		if m.GetProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProductServiceClientMock.GetProducts")
		} else {
			m.t.Errorf("Expected call to ProductServiceClientMock.GetProducts with params: %#v", *m.GetProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProducts != nil && mm_atomic.LoadUint64(&m.afterGetProductsCounter) < 1 {
		m.t.Error("Expected call to ProductServiceClientMock.GetProducts")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetProductsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductsDone()
}
