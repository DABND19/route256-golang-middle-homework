version: "3.1"
services:
  prometheus:
    image: prom/prometheus
    ports:
      - 1010:9090
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./deploy/prometheus/alerts.yml:/etc/prometheus/alerts.yml
    depends_on:
      - loms_app
  jaeger:
    image: jaegertracing/all-in-one:1.18
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686 # web
      - 14268:14268
      - 9411:9411


  checkout_app:
    image: checkout
    build: ./checkout/
    ports:
      - "8080:8080"
    depends_on:
      - checkout_pgbouncer
  checkout_postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_DB=checkout
      - POSTGRES_PASSWORD=hackme123
    volumes:
      - checkout_pgdata:/var/lib/postgresql/data
    ports:
      - "5430:5432"
  checkout_pgbouncer:
    image: bitnami/pgbouncer:latest
    environment:
      - POSTGRESQL_USERNAME=user
      - POSTGRESQL_PASSWORD=hackme123
      - POSTGRESQL_DATABASE=checkout
      - POSTGRESQL_HOST=checkout_postgres
      - POSTGRESQL_PORT=5432
      - PGBOUNCER_AUTH_USER=user
      - PGBOUNCER_DATABASE=checkout
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_MAX_DB_CONNECTIONS=10
    depends_on:
      - checkout_postgres

  loms_app:
    image: loms
    build: ./loms/
    ports:
      - "8081:8081"
    depends_on:
      loms_pgbouncer:
        condition: service_started
      notifications_kafka_broker1:
        condition: service_healthy
      notifications_kafka_broker2:
        condition: service_healthy
      notifications_kafka_broker3:
        condition: service_healthy
  loms_postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_DB=loms
      - POSTGRES_PASSWORD=hackme123
    volumes:
      - loms_pgdata:/var/lib/postgresql/data
    ports:
      - "5431:5432"
  loms_pgbouncer:
    image: bitnami/pgbouncer:latest
    environment:
      - POSTGRESQL_USERNAME=user
      - POSTGRESQL_PASSWORD=hackme123
      - POSTGRESQL_DATABASE=loms
      - POSTGRESQL_HOST=loms_postgres
      - POSTGRESQL_PORT=5432
      - PGBOUNCER_AUTH_USER=user
      - PGBOUNCER_DATABASE=loms
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_MAX_DB_CONNECTIONS=10
    depends_on:
      - loms_postgres

  notifications_app:
    image: notifications
    build: ./notifications/
    ports:
      - "8082:8082"
    depends_on:
      notifications_kafka_broker1:
        condition: service_healthy
      notifications_kafka_broker2:
        condition: service_healthy
      notifications_kafka_broker3:
        condition: service_healthy
  notifications_kafka_broker1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      notifications_kafka_zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9091 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "9091:9091"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://notifications_kafka_broker1:29091,LISTENER_EXT://0.0.0.0:9091
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://notifications_kafka_broker1:29091,LISTENER_EXT://localhost:9091
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=notifications_kafka_zookeeper:2181
      - KAFKA_BROKER_ID=1
      - ZOOKEEPER=notifications_kafka_zookeeper:2181
  notifications_kafka_broker2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      notifications_kafka_zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "9092:9092"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://notifications_kafka_broker2:29092,LISTENER_EXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://notifications_kafka_broker2:29092,LISTENER_EXT://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=notifications_kafka_zookeeper:2181
      - KAFKA_BROKER_ID=2
      - ZOOKEEPER=notifications_kafka_zookeeper:2181
  notifications_kafka_broker3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      notifications_kafka_zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9093 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - "9093:9093"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://notifications_kafka_broker3:29093,LISTENER_EXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://notifications_kafka_broker3:29093,LISTENER_EXT://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=notifications_kafka_zookeeper:2181
      - KAFKA_BROKER_ID=3
      - ZOOKEEPER=notifications_kafka_zookeeper:2181
  notifications_kafka_zookeeper:
    image: confluentinc/cp-zookeeper:latest 
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper:2888:3888

  redpanda_console:
    image: redpandadata/console:latest
    ports:
      - "9090:8080"
    environment:
      - KAFKA_BROKERS=notifications_kafka_broker1:29091,notifications_kafka_broker2:29092,notifications_kafka_broker3:29093
    depends_on:
      notifications_kafka_broker1:
        condition: service_healthy
      notifications_kafka_broker2:
        condition: service_healthy
      notifications_kafka_broker3:
        condition: service_healthy

volumes:
  checkout_pgdata:
  loms_pgdata:
